name: Build and Publish Notebooks

on:
  push:
    branches:
      - production  # Default branch

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'  # Adjust as needed

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Prepare Output Directory and Copy Data
      - name: Prepare Output Directory and Copy Data
        run: |
          mkdir -p docs
          cp -r ./data ./work  # Copy the data directory to work for notebook references
          echo "Contents of work folder before conversion:"
          ls -R work

      # Step 5: Convert Notebooks and Preserve Folder Structure
      - name: Convert Notebooks and Preserve Folder Structure
        run: |
          # Start the Index Page with TailwindCSS CDN
          echo "<html lang='en'>
                  <head>
                    <meta charset='UTF-8'>
                    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                    <title>Index of Notebooks</title>
                    <script src='https://cdn.tailwindcss.com'></script>
                  </head>
                  <body class='bg-gray-100 p-8'>
                    <div class='container mx-auto'>
                      <h1 class='text-4xl font-semibold text-center mb-8'>Index of Notebooks</h1>
                      <ul class='space-y-4'>" > docs/index.html

          # Recursive function to generate the folder structure with links
          generate_nav() {
            local directory=$1
            local depth=$2
            local indent=$(printf '%*s' $((depth * 4)))  # Calculate indentation for folder levels

            echo "$indent<ul class='space-y-2'>" >> docs/index.html

            for file in "$directory"/*; do
              if [ -d "$file" ]; then
                # Directory: create a folder link
                folder_name=$(basename "$file")
                echo "$indent    <li class='font-bold text-lg'>$folder_name</li>" >> docs/index.html
                # Recursively list the contents of the subdirectory
                generate_nav "$file" $((depth + 1))
              elif [[ "$file" == *.ipynb ]]; then
                # Notebook: create a link to the notebook
                notebook_name=$(basename "$file" .ipynb)
                relative_path=$(realpath --relative-to=./ "$file")
                echo "$indent    <li class='p-4 bg-white rounded-lg shadow-md hover:bg-blue-50'>
                        <a href=\"$relative_path\" class='text-xl font-medium text-blue-600 hover:text-blue-800'>$notebook_name</a>
                      </li>" >> docs/index.html
              fi
            done

            echo "$indent</ul>" >> docs/index.html
          }

          # Start the folder structure generation from the "work" directory
          generate_nav "./work" 0

          # Close the Index page HTML
          echo "</div></body></html>" >> docs/index.html

          echo "Contents of docs folder after conversion:"
          ls -R docs

          # Generate navigation for each notebook page
          for notebook in $(find ./work -name "*.ipynb"); do
            relative_dir=$(dirname "$notebook" | sed 's|^./work/||')  # Extract the relative path within 'work'
            notebook_name=$(basename "$notebook" .ipynb)
            output_dir="docs/$relative_dir"
            
            # Create previous and next navigation links
            all_notebooks=($(find "$relative_dir" -name "*.html" | sort))  # List all notebooks in the same directory and sort

            if [ ${#all_notebooks[@]} -gt 0 ]; then  # Check if the array has elements
              index=$(echo "${all_notebooks[@]}" | grep -n "$relative_dir/$notebook_name.html" | cut -d ':' -f 1)
              
              # Ensure index is valid before accessing the array
              if [ -n "$index" ]; then
                prev_notebook=${all_notebooks[$((index-1))]}
                next_notebook=${all_notebooks[$((index+1))]}

                # Add navigation to the current notebook page
                echo "<html lang='en'>
                        <head>
                          <meta charset='UTF-8'>
                          <meta name='viewport' content='width=device-width, initial-scale=1.0'>
                          <title>$notebook_name</title>
                          <script src='https://cdn.tailwindcss.com'></script>
                        </head>
                        <body class='bg-gray-100 p-8'>
                          <div class='container mx-auto'>
                            <h1 class='text-4xl font-semibold text-center mb-8'>$notebook_name</h1>
                            <div class='flex justify-between'>
                              <a href='/docs/index.html' class='text-blue-600 hover:text-blue-800'>Back to Home</a>
                              <div>
                                $(if [[ -n "$prev_notebook" ]]; then echo "<a href='/docs/$prev_notebook' class='text-blue-600 hover:text-blue-800'>Previous</a>"; fi)
                                $(if [[ -n "$next_notebook" ]]; then echo "<a href='/docs/$next_notebook' class='text-blue-600 hover:text-blue-800 ml-4'>Next</a>"; fi)
                              </div>
                            </div>
                            <iframe src='/docs/$relative_dir/$notebook_name.html' class='w-full h-screen' frameborder='0'></iframe>
                          </div>
                        </body>
                      </html>" > "$output_dir/$notebook_name.html"
              fi
            fi
          done

      # Step 6: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
